/*
 * Corne/crkbd keymap using ZMK
 * Based off of miryoku
 * https://github.com/hhoozzii/corny
 *
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer Definitions
#define DEFAULT 0
#define NAV     1
#define MEDIA   2
#define NUM     3
#define FUNC    4
#define BT      5
#define SYM     6

/ {
//  Homerow mod held behaviour 
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping_term_ms = <120>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };


// HELD on each layer shows which key(s) are being held to access that layer
// #'s signify the split

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ---------------------------------------------------------------------------------------------------------
// | - |    Q     |    W     |     F    |     P    |     G    | # |     J    |     L    |     U    |    Y     |    ;     | - |
// | - |  A/LGUI  |  R/LALT  |  S/LCTL  |  T/LSFT  |     D    | # |     H    |   N/RSFT |  E/RCTRL |  I/RALT  |  O/RGUI  | - |
// | - |    Z     |    X     |     C    |     V    |     B    | # |     N    |     M    |     ,    |     .    |    /     | - |
//              | lt MEDIA ESC | lt NAV SPC | lt Mouse TAB | # | lt SYM RET | lt NUM BKSP | lt FUNC DEL |

            bindings = <
&trans  &kp Q        &kp W          &kp E        &kp R          &kp T        &kp Y         &kp U        &kp I         &kp O        &kp P           &trans
&trans  &hm LGUI A   &hm LALT S     &hm LCTL D   &hm LSFT F     &kp G        &kp H         &hm RSFT J   &hm RCTL K    &hm RALT L   &hm RGUI APOS   &trans
&trans  &kp Z        &kp X          &kp C        &kp V          &kp B        &kp N         &kp M        &kp CMMA      &kp DOT      &kp FSLH        &trans
                     &lt MEDIA ESC  &lt NAV SPC  &lt MOUSE TAB  &lt SYM RET  &lt NUM BKSP  &lt FUNC DEL
            >;
        };

        navigation {
// ---------------------------------------------------------------------------------------
// |     |      |      |       |      |      | # | Redo   | Paste | COPY  | Cut   |  Undo   |     |
// |     | LGUI | LALT | LCTL  | LSFT |      | # |caps    | lft   |  DWN  |  Up   |  RGT    |     |
// |     |      | RALT |       |      |      | # | insert | home  | pgdn  |  pgup |  end    |     |
//                     |       | HELD | tab  | # | enter  | BKSP  |  DEL  |

            bindings = <
&trans   &trans     &trans       &trans       &trans          &trans        &kp C_AC_REDO  &kp PSTE   &kp COPY     &kp CUT      &kp UNDO         &trans    
&trans   &kp LGUI   &kp LALT     &kp LCTL     &kp LSFT        &trans        &kp CAPS       &kp LARW   &kp DARW     &kp UARW     &kp RARW         &trans
&trans   &kp RALT   &trans       &trans       &trans          &trans        &kp INS        &kp HOME   &kp PGDN     &kp PGUP     &kp END          &trans
                    &trans       &trans       &trans          &kp RET       &kp BKSP       &kp DEL
            >;  
        };

        media_keys {
// -------------------------------------------------------------------------------------
// | - |          |          |          |          |          | # |          |          |          |          |          | - |
// |   |   LGUI   |   LALT   |   LCTL   |   LSFT   |          | # |   PREV   |   VOLD   |   VOLU   |   NEXT   |          |   |
// |   |          |          |          |          |          | # |   U_BTCLR| U_BTSEL0 | U_BTSEL1 | U_BTSEL2 | U_BTSEL3 |
//                           |          |          |          | # |   STOP   |   PLAY   |   MUTE   |

            bindings = <
&trans     &trans    &trans     &trans     &trans     &trans      &trans      &trans        &trans        &trans        &trans          &trans    
&trans     &kp LGUI  &kp LALT   &kp LCTL   &kp LSFT   &trans      &cp M_PREV  &cp M_VOLD    &cp M_VOLU    &cp M_NEXT    &trans          &trans
&trans     &kp RALT  &trans     &trans     &trans     &trans      &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &trans
                                &trans     &trans     &trans      &cp M_STOP  &cp M_PLAY    &cp M_MUTE
            >;
        };

        numbers {
// ---------------------------------------------------------------------------------
// |     |  [{ |  7  |  8  |  9  |  ]}  | # |     |      |      |      |      |     |
// |     |  '@ |  4  |  5  |  6  |  =+  | # |     |  SFT | CTRL | LALT | LGUI |     |
// |     |  #~ |  1  |  2  |  3  |  \|  | # |     |      |      | RALT |      |     | 
//                   |  .  |  0  |  -_  | # | WIN | HELD |      |

            bindings = <
&trans    &kp LBKT  &kp NUM_7    &kp NUM_8    &kp NUM_9    &kp RBKT      &trans    &trans   &trans    &trans    &trans    &trans    
&trans    &kp QUOT  &kp NUM_4    &kp NUM_5    &kp NUM_6    &kp EQL       &trans    &kp LSFT  &kp LCTL &kp LALT  &kp LGUI  &trans
&trans    &trans    &kp NUM_1    &kp NUM_2    &kp NUM_3    &kp BSLH      &trans    &trans   &kp RALT  &trans    &trans    &trans    
                                 &kp DOT      &kp NUM_0    &kp MINUS     &kp LGUI   &trans   &trans
            >;
        };

        function_keys {
// -------------------------------------------------------------------------------------
// |     |  F12 |  F7  |  F8  |  F9  | PTSRN | # |     |     |      |      |      |     |
// |     |  F11 |  F4  |  F5  |  F6  | SCRLL | # |     | SFT | CTRL | LALT | LGUI |     |
// |     |  F10 |  F1  |  F2  |  F3  | PAUSE | # |     |     |      | RALT |      |     | 
//                     |      |      |  TAB  | # | WIN |     | HELD |

            bindings = <
&trans    &kp F12    &kp F7    &kp F8    &kp F9    &kp PRSC      &trans    &trans   &trans    &trans    &trans    &trans    
&trans    &kp F11    &kp F4    &kp F5    &kp F6    &trans        &trans    &kp LSFT &kp LCTL  &kp LALT  &kp LGUI  &trans
&trans    &kp F10    &kp F1    &kp F2    &kp F3    &trans        &trans    &trans   &kp RALT  &trans    &trans    &trans    
                               &trans    &trans    &kp LSFT      &kp LGUI   &trans   &trans
            >;
        };
//        
//          mouse_keys {
// -------------------------------------------------------------------------------------
// | - |          |          |          |          |          | # |   redo   |   paste  |   copy   |    cut   |   undo   | - |
// | - |   LGUI   |   LALT   |   LCTL   |   LSFT   |          | # |          |   ms_l   |   ms_d   |    ms_u  |  ms_r    | - |
// | - |          |          |          |          |          | # |          |   wh_l   |   wh_d   |    wh_u  |  wh_r    | - |
//                           |          |          |          | # |  btn1    |   btn3   |   btn2   |
//
//            bindings = <
//&trans    &trans    &trans    &trans    &trans    &trans      &kp C_AC_REDO   &kp PSTE    &kp COPY     &kp CUT      &kp UNDO       &trans    
//&trans    &kp LGUI   &kp LALT  &kp LCTL  &kp LSFT &trans      &trans          &kp U_MS_L  &kp U_MS_D   &kp U_MS_U   &kp U_MS_R     &trans
//&trans    &trans    &trans    &trans    &trans    &trans      &trans          &kp U_WH_L  &kp U_WH_D   &kp U_WH_U   &kp U_WH_R     &trans    
//                               &trans    &trans   &trans      &kp U_BTN1      &kp U_BTN3  &kp U_BTN2
//            >;
//       };

        mouse {
// -------------------------------------------------------------------------------------
// | - |          |          |          |          |          | # |   redo   |   paste  |   copy   |    cut   |   undo   | - |
// | - |   LGUI   |   LALT   |   LCTL   |   LSFT   |          | # |          |   ms_l   |   ms_d   |    ms_u  |  ms_r    | - |
// | - |          |          |          |          |          | # |          |   wh_l   |   wh_d   |    wh_u  |  wh_r    | - |
//                           |          |          |          | # |  btn1    |   btn3   |   btn2   |

            bindings = <
&trans    &trans     &trans    &trans    &trans    &trans      &kp C_AC_REDO  &kp PSTE    &kp COPY     &kp CUT      &kp UNDO     &trans    
&trans    &kp LGUI   &kp LALT  &kp LCTL  &kp LSFT  &trans      &trans         &trans  &trans   &trans   &trans   &trans
&trans    &kp RALT   &trans    &trans    &trans    &trans      &trans           &trans   &trans  &trans    &trans    &trans    
                               &trans    &trans    &trans      &kp LGUI   &trans   &trans
            >;
        };        
    };
};
